CMAKE_MINIMUM_REQUIRED (VERSION 3.1)

SET(MY_PROJECT_NAME helloworld)

PROJECT (${MY_PROJECT_NAME})

IF(DEFINED CMAKE_BUILD_TYPE)
   SET(CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE} CACHE STRING "Choose the type of
   build, options are: None(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug
   Release RelWithDebInfo MinSizeRel.")
ELSE()
   SET(CMAKE_BUILD_TYPE Debug CACHE STRING "Choose the type of build,
	  options are: None(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release
	  RelWithDebInfo MinSizeRel.")
ENDIF()
SET(CMAKE_CXX_FLAGS_Debug "-g -O0 -Wall -W -Wreturn-type -Wno-unused-parameter -Werror")
SET(CMAKE_CXX_FLAGS_Release "-O2 -Wall -Werror -Wstrict-aliasing=2 -mwindows") 

SET(${MY_PROJECT_NAME}_VERSION_MAJOR "0")
SET(${MY_PROJECT_NAME}_VERSION_MINOR "2")
SET(${MY_PROJECT_NAME}_VERSION_PATCH "0")
SET(${MY_PROJECT_NAME}_RELEASE_TYPE "${CMAKE_BUILD_TYPE}")
SET(${MY_PROJECT_NAME}_VERSION_STATUS "WIP")

IF(DEFINED ${MY_PROJECT_NAME}_DEMO_STATUS)
   SET(${MY_PROJECT_NAME}_DEMO_STATUS ${MY_PROJECT_NAME}_DEMO_STATUS CACHE STRING "Choose the 
   demo status, options are: Demo Full.")
ELSE()
   SET(${MY_PROJECT_NAME}_DEMO_STATUS Demo CACHE STRING "Choose the 
   demo status, options are: Demo Full.")
ENDIF()

SET (CMAKE_INCLUDE_CURRENT_DIR ON)
SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR})

FIND_PACKAGE(SDL REQUIRED)

IF(WIN32)
    # options and settings for the Windows platform
	MESSAGE("INCLUDED DIRS : ${SDL_INCLUDE_DIR}")
	MESSAGE("LIBS : ${SDL_LIBRARY}")

	SET(SDL_INCLUDE_DIR ${CMAKE_FIND_ROOT_PATH}/include/SDL)

	MESSAGE("INCLUDED DIRS : ${SDL_INCLUDE_DIR}")
	MESSAGE("LIBS : ${SDL_LIBRARY}")
ENDIF(WIN32)

IF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
# any options or settings for MacOSX platform
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")

INCLUDE_DIRECTORIES(${SDL_INCLUDE_DIR})

ADD_SUBDIRECTORY (source)
ADD_SUBDIRECTORY (assets)
ADD_SUBDIRECTORY (res)

FILE (GLOB MY_PROJECT_RESOURCES assets/images/*.png)
FILE (GLOB MY_PROJECT_MUSIC_RESOURCES assets/sounds/*.ogg assets/sounds/*.wav)
FILE (GLOB MY_PROJECT_FONT_RESOURCES assets/fonts/*.ttf assets/fonts/*.TXT)
INSTALL (FILES ${MY_PROJECT_RESOURCES} DESTINATION assets/images)
INSTALL (FILES ${MY_PROJECT_MUSIC_RESOURCES} DESTINATION assets/sounds)
INSTALL (FILES ${MY_PROJECT_FONT_RESOURCES} DESTINATION assets/fonts)


SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "helloworld cross platform project using SDL2")
SET(CPACK_PACKAGE_VENDOR "ABC123 Corp")
SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/README.md")
SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
SET(CPACK_PACKAGE_VERSION_MAJOR ${${MY_PROJECT_NAME}_VERSION_MAJOR})
SET(CPACK_PACKAGE_VERSION_MINOR ${${MY_PROJECT_NAME}_VERSION_MINOR})
SET(CPACK_PACKAGE_VERSION_PATCH ${${MY_PROJECT_NAME}_VERSION_PATCH})
SET(CPACK_PACKAGE_FILE_NAME ${MY_PROJECT_NAME}-${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}-${CMAKE_SYSTEM_NAME}-${${MY_PROJECT_NAME}_DEMO_STATUS})


if(WIN32 AND NOT UNIX)
	SET(CPACK_NSIS_DISPLAY_NAME "sdl2-helloworld")
	SET(CPACK_NSIS_HELP_LINK "http://help.your-domain.com")
	SET(CPACK_NSIS_URL_INFO_ABOUT "info.your-domain.com")
	SET(CPACK_NSIS_CONTACT "your-name@your-domain.com")
	SET(CPACK_NSIS_MUI_ICON "${PROJECT_SOURCE_DIR}/res/desktop-app.ico")
	SET(CPACK_NSIS_MUI_UNIICON "${PROJECT_SOURCE_DIR}/res/uninstall.ico")
	SET(CPACK_NSIS_MODIFY_PATH OFF)
	#Until NSIS is configured correctly.
	SET(CPACK_GENERATOR "ZIP") 
	SET(CPACK_PACKAGE_INSTALL_REGISTRY_KEY "sdl2-helloworld")
	SET(CPACK_PACKAGE_EXECUTABLES "${MY_PROJECT_NAME}-bin.exe" "sdl2-helloworld")
	SET(CPACK_NSIS_MENU_LINKS  "${MY_PROJECT_NAME}-bin.exe" "sdl2-helloworld")
	FILE (GLOB WIN32_DLLS libs-win32/*.dll)
	INSTALL (FILES ${WIN32_DLLS} DESTINATION .)
ELSE(WIN32 AND NOT UNIX)
	SET(CPACK_GENERATOR "TGZ")
ENDIF(WIN32 AND NOT UNIX)

INCLUDE (CPack)

